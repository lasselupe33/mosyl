// automatically generated by Xtext
grammar org.mdse.puzzle.dsl.DSL with org.eclipse.xtext.common.Terminals

import "http://org.mdse/puzzle" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://org.mdse/constructs" as constructs
import "http://org.mdse/game" as game

Puzzle returns Puzzle:
	'Puzzle'
	name=EString
	'{'
		('description' description=EString)?
		'tests' '{' tests+=UnitTest ( "," tests+=UnitTest)* '}' 
		('inputs' '{' inputs+=Input ( "," inputs+=Input)* '}' )?
		'allowedStatements' '{' allowedStatements+=Statement ( "," allowedStatements+=Statement)* '}' 
	'}';



Statement returns constructs::Statement:
	IfElseStatement | DeclareStatement | ReturnStatement;

Expression returns constructs::Expression:
	IntegerVariable | StringVariable | BooleanVariable | ComparativeExpression | ArithmeticExpression;



Variable returns constructs::Variable:
	IntegerVariable | StringVariable | BooleanVariable;

EString returns ecore::EString:
	STRING | ID;

UnitTest returns UnitTest:
	'UnitTest'
	'{'
		('errorMessage' failedMessage=EString)?
		('inputs' '(' inputs+=[Input|EString] ( "," inputs+=[Input|EString])* ')' )?
		'expected' expected=Expression
	'}';

Input returns Input:
	'Input'
	'{'
		'nextStatement' nextStatement=[game::UsedStatement|EString]
		'declareStatement' declareStatement=DeclareStatement
	'}';

IntegerVariable returns constructs::IntegerVariable:
	{constructs::IntegerVariable}
	'IntegerVariable'
	name=EString;

StringVariable returns constructs::StringVariable:
	{constructs::StringVariable}
	'StringVariable'
	name=EString;

BooleanVariable returns constructs::BooleanVariable:
	{constructs::BooleanVariable}
	'BooleanVariable'
	name=EString;

ComparativeExpression returns constructs::ComparativeExpression:
	'ComparativeExpression'
	'{'
		('operator' operator=ComparativeOperator)?
		'expression1' '{' expression1+=Expression ( "," expression1+=Expression)* '}' 
		'expression2' expression2=Expression
	'}';

ArithmeticExpression returns constructs::ArithmeticExpression:
	'ArithmeticExpression'
	'{'
		('operator' operator=ArithmeticOperator)?
		'expression1' '{' expression1+=Expression ( "," expression1+=Expression)* '}' 
		'expression2' expression2=Expression
	'}';

enum ComparativeOperator returns constructs::ComparativeOperator:
				Equal = 'Equal' | NotEqual = 'NotEqual' | LessThan = 'LessThan' | LessThanEq = 'LessThanEq' | GreaterThan = 'GreaterThan' | GreaterThanEq = 'GreaterThanEq';

enum ArithmeticOperator returns constructs::ArithmeticOperator:
				Plus = 'Plus' | Minus = 'Minus' | Multiply = 'Multiply' | Divide = 'Divide';

UsedStatement returns game::UsedStatement:
	'UsedStatement'
	'{'
		('nextStatements' '{' nextStatements+=UsedStatement ( "," nextStatements+=UsedStatement)* '}' )?
		'statement' statement=Statement
	'}';

DeclareStatement returns constructs::DeclareStatement:
	'DeclareStatement'
	'{'
		'variable' variable=Variable
	'}';

IfElseStatement returns constructs::IfElseStatement:
	'IfElseStatement'
	'{'
		'condition' condition=Expression
		'elseStatement' elseStatement=Statement
		'ifStatement' ifStatement=Statement
	'}';

ReturnStatement returns constructs::ReturnStatement:
	'ReturnStatement'
	'{'
		'expression' expression=Expression
	'}';
