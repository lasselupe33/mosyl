/*
 * generated by Xtext 2.24.0
 */
grammar InternalDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.mdse.puzzle.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mdse.puzzle.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mdse.puzzle.dsl.services.DSLGrammarAccess;

}

@parser::members {

 	private DSLGrammarAccess grammarAccess;

    public InternalDSLParser(TokenStream input, DSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Puzzle";
   	}

   	@Override
   	protected DSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePuzzle
entryRulePuzzle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPuzzleRule()); }
	iv_rulePuzzle=rulePuzzle
	{ $current=$iv_rulePuzzle.current; }
	EOF;

// Rule Puzzle
rulePuzzle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPuzzleAccess().getPuzzleAction_0(),
					$current);
			}
		)
		otherlv_1='PUZZLE'
		{
			newLeafNode(otherlv_1, grammarAccess.getPuzzleAccess().getPUZZLEKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPuzzleAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='name'
		{
			newLeafNode(otherlv_3, grammarAccess.getPuzzleAccess().getNameKeyword_3());
		}
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getPuzzleAccess().getEqualsSignKeyword_4());
		}
		(
			(
				lv_name_5_0=RULE_STRING
				{
					newLeafNode(lv_name_5_0, grammarAccess.getPuzzleAccess().getNameSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPuzzleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='description'
		{
			newLeafNode(otherlv_6, grammarAccess.getPuzzleAccess().getDescriptionKeyword_6());
		}
		otherlv_7='='
		{
			newLeafNode(otherlv_7, grammarAccess.getPuzzleAccess().getEqualsSignKeyword_7());
		}
		(
			(
				lv_description_8_0=RULE_STRING
				{
					newLeafNode(lv_description_8_0, grammarAccess.getPuzzleAccess().getDescriptionSTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPuzzleRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPuzzleAccess().getInputsInputsParserRuleCall_9_0());
				}
				lv_inputs_9_0=ruleInputs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPuzzleRule());
					}
					set(
						$current,
						"inputs",
						lv_inputs_9_0,
						"org.mdse.puzzle.dsl.DSL.Inputs");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPuzzleAccess().getTestsUnitTestParserRuleCall_10_0());
				}
				lv_tests_10_0=ruleUnitTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPuzzleRule());
					}
					add(
						$current,
						"tests",
						lv_tests_10_0,
						"org.mdse.puzzle.dsl.DSL.UnitTest");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getPuzzleAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleInputs
entryRuleInputs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputsRule()); }
	iv_ruleInputs=ruleInputs
	{ $current=$iv_ruleInputs.current; }
	EOF;

// Rule Inputs
ruleInputs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='INPUTS'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputsAccess().getINPUTSKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputsAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputsAccess().getVariablesVariableParserRuleCall_2_0());
				}
				lv_variables_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputsRule());
					}
					add(
						$current,
						"variables",
						lv_variables_2_0,
						"org.mdse.puzzle.dsl.DSL.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getInputsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleUnitTest
entryRuleUnitTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitTestRule()); }
	iv_ruleUnitTest=ruleUnitTest
	{ $current=$iv_ruleUnitTest.current; }
	EOF;

// Rule UnitTest
ruleUnitTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnitTestAccess().getUnitTestAction_0(),
					$current);
			}
		)
		otherlv_1='TEST'
		{
			newLeafNode(otherlv_1, grammarAccess.getUnitTestAccess().getTESTKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnitTestAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='INPUTS'
			{
				newLeafNode(otherlv_3, grammarAccess.getUnitTestAccess().getINPUTSKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getUnitTestAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnitTestAccess().getInputsUnitTestInputParserRuleCall_3_2_0());
					}
					lv_inputs_5_0=ruleUnitTestInput
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnitTestRule());
						}
						add(
							$current,
							"inputs",
							lv_inputs_5_0,
							"org.mdse.puzzle.dsl.DSL.UnitTestInput");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getUnitTestAccess().getRightCurlyBracketKeyword_3_3());
			}
		)?
		otherlv_7='EXPECTS'
		{
			newLeafNode(otherlv_7, grammarAccess.getUnitTestAccess().getEXPECTSKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitTestAccess().getExpectedLiteralParserRuleCall_5_0());
				}
				lv_expected_8_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitTestRule());
					}
					set(
						$current,
						"expected",
						lv_expected_8_0,
						"org.mdse.puzzle.dsl.DSL.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9='ON_FAIL'
			{
				newLeafNode(otherlv_9, grammarAccess.getUnitTestAccess().getON_FAILKeyword_6_0());
			}
			otherlv_10='{'
			{
				newLeafNode(otherlv_10, grammarAccess.getUnitTestAccess().getLeftCurlyBracketKeyword_6_1());
			}
			otherlv_11='msg'
			{
				newLeafNode(otherlv_11, grammarAccess.getUnitTestAccess().getMsgKeyword_6_2());
			}
			otherlv_12='='
			{
				newLeafNode(otherlv_12, grammarAccess.getUnitTestAccess().getEqualsSignKeyword_6_3());
			}
			(
				(
					lv_failedMessage_13_0=RULE_STRING
					{
						newLeafNode(lv_failedMessage_13_0, grammarAccess.getUnitTestAccess().getFailedMessageSTRINGTerminalRuleCall_6_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUnitTestRule());
						}
						setWithLastConsumed(
							$current,
							"failedMessage",
							lv_failedMessage_13_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_14='}'
			{
				newLeafNode(otherlv_14, grammarAccess.getUnitTestAccess().getRightCurlyBracketKeyword_6_5());
			}
		)?
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getUnitTestAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleUnitTestInput
entryRuleUnitTestInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnitTestInputRule()); }
	iv_ruleUnitTestInput=ruleUnitTestInput
	{ $current=$iv_ruleUnitTestInput.current; }
	EOF;

// Rule UnitTestInput
ruleUnitTestInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnitTestInputRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getUnitTestInputAccess().getVariableVariableCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getUnitTestInputAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnitTestInputAccess().getOverwritingValueLiteralParserRuleCall_2_0());
				}
				lv_overwritingValue_2_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnitTestInputRule());
					}
					set(
						$current,
						"overwritingValue",
						lv_overwritingValue_2_0,
						"org.mdse.puzzle.dsl.DSL.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getIntergerLiteralParserRuleCall_0());
		}
		this_IntergerLiteral_0=ruleIntergerLiteral
		{
			$current = $this_IntergerLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1());
		}
		this_StringLiteral_1=ruleStringLiteral
		{
			$current = $this_StringLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2());
		}
		this_BooleanLiteral_2=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntergerLiteral
entryRuleIntergerLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntergerLiteralRule()); }
	iv_ruleIntergerLiteral=ruleIntergerLiteral
	{ $current=$iv_ruleIntergerLiteral.current; }
	EOF;

// Rule IntergerLiteral
ruleIntergerLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntergerLiteralAccess().getIntergerLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getIntergerLiteralAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntergerLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringLiteralAccess().getStringLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_STRING
				{
					newLeafNode(lv_value_1_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_BOOLEAN
				{
					newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.mdse.puzzle.dsl.DSL.BOOLEAN");
				}
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getIntegerVariableParserRuleCall_0());
		}
		this_IntegerVariable_0=ruleIntegerVariable
		{
			$current = $this_IntegerVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAccess().getStringVariableParserRuleCall_1());
		}
		this_StringVariable_1=ruleStringVariable
		{
			$current = $this_StringVariable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAccess().getBooleanVariableParserRuleCall_2());
		}
		this_BooleanVariable_2=ruleBooleanVariable
		{
			$current = $this_BooleanVariable_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerVariable
entryRuleIntegerVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerVariableRule()); }
	iv_ruleIntegerVariable=ruleIntegerVariable
	{ $current=$iv_ruleIntegerVariable.current; }
	EOF;

// Rule IntegerVariable
ruleIntegerVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerVariableAccess().getIntegerVariableAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerVariableAccess().getIntKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getIntegerVariableAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getIntegerVariableAccess().getEqualsSignKeyword_3());
		}
		(
			(
				lv_value_4_0=RULE_INT
				{
					newLeafNode(lv_value_4_0, grammarAccess.getIntegerVariableAccess().getValueINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerVariableRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleStringVariable
entryRuleStringVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringVariableRule()); }
	iv_ruleStringVariable=ruleStringVariable
	{ $current=$iv_ruleStringVariable.current; }
	EOF;

// Rule StringVariable
ruleStringVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringVariableAccess().getStringVariableAction_0(),
					$current);
			}
		)
		otherlv_1='string'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringVariableAccess().getStringKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getStringVariableAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getStringVariableAccess().getEqualsSignKeyword_3());
		}
		(
			(
				lv_value_4_0=RULE_STRING
				{
					newLeafNode(lv_value_4_0, grammarAccess.getStringVariableAccess().getValueSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStringVariableRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanVariable
entryRuleBooleanVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanVariableRule()); }
	iv_ruleBooleanVariable=ruleBooleanVariable
	{ $current=$iv_ruleBooleanVariable.current; }
	EOF;

// Rule BooleanVariable
ruleBooleanVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanVariableAccess().getBooleanVariableAction_0(),
					$current);
			}
		)
		otherlv_1='bool'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanVariableAccess().getBoolKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getBooleanVariableAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getBooleanVariableAccess().getEqualsSignKeyword_3());
		}
		(
			(
				lv_value_4_0=RULE_BOOLEAN
				{
					newLeafNode(lv_value_4_0, grammarAccess.getBooleanVariableAccess().getValueBOOLEANTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanVariableRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"org.mdse.puzzle.dsl.DSL.BOOLEAN");
				}
			)
		)
	)
;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
