/*
 * generated by Xtext 2.24.0
 */
package org.mdse.puzzle.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PuzzleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.Puzzle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPuzzleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPUZZLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cDescriptionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Assignment cInputsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cInputsInputsParserRuleCall_9_0 = (RuleCall)cInputsAssignment_9.eContents().get(0);
		private final Assignment cTestsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTestsUnitTestParserRuleCall_10_0 = (RuleCall)cTestsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Puzzle puzzle::Puzzle:
		//	{puzzle::Puzzle}
		//	'PUZZLE' '{'
		//	'name' '=' name=STRING
		//	'description' '=' description=STRING
		//	inputs=Inputs?
		//	tests+=UnitTest+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{puzzle::Puzzle}
		//'PUZZLE' '{'
		//'name' '=' name=STRING
		//'description' '=' description=STRING
		//inputs=Inputs?
		//tests+=UnitTest+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{puzzle::Puzzle}
		public Action getPuzzleAction_0() { return cPuzzleAction_0; }
		
		//'PUZZLE'
		public Keyword getPUZZLEKeyword_1() { return cPUZZLEKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'name'
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//name=STRING
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_5_0() { return cNameSTRINGTerminalRuleCall_5_0; }
		
		//'description'
		public Keyword getDescriptionKeyword_6() { return cDescriptionKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_0() { return cDescriptionSTRINGTerminalRuleCall_8_0; }
		
		//inputs=Inputs?
		public Assignment getInputsAssignment_9() { return cInputsAssignment_9; }
		
		//Inputs
		public RuleCall getInputsInputsParserRuleCall_9_0() { return cInputsInputsParserRuleCall_9_0; }
		
		//tests+=UnitTest+
		public Assignment getTestsAssignment_10() { return cTestsAssignment_10; }
		
		//UnitTest
		public RuleCall getTestsUnitTestParserRuleCall_10_0() { return cTestsUnitTestParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class InputsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.Inputs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINPUTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Inputs puzzle::Inputs:
		//	'INPUTS' '{'
		//	variables+=Variable+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'INPUTS' '{'
		//variables+=Variable+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'INPUTS'
		public Keyword getINPUTSKeyword_0() { return cINPUTSKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//variables+=Variable+
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class UnitTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.UnitTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTESTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cINPUTSKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInputsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInputsUnitTestInputParserRuleCall_3_2_0 = (RuleCall)cInputsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cEXPECTSKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpectedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpectedLiteralParserRuleCall_5_0 = (RuleCall)cExpectedAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cON_FAILKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cMsgKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cEqualsSignKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cFailedMessageAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cFailedMessageSTRINGTerminalRuleCall_6_4_0 = (RuleCall)cFailedMessageAssignment_6_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//UnitTest puzzle::UnitTest:
		//	{puzzle::UnitTest}
		//	'TEST' '{' ('INPUTS' '{'
		//	inputs+=UnitTestInput+
		//	'}')?
		//	'EXPECTS' expected=Literal ('ON_FAIL' '{'
		//	'msg' '=' failedMessage=STRING
		//	'}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{puzzle::UnitTest}
		//'TEST' '{' ('INPUTS' '{'
		//inputs+=UnitTestInput+
		//'}')?
		//'EXPECTS' expected=Literal ('ON_FAIL' '{'
		//'msg' '=' failedMessage=STRING
		//'}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{puzzle::UnitTest}
		public Action getUnitTestAction_0() { return cUnitTestAction_0; }
		
		//'TEST'
		public Keyword getTESTKeyword_1() { return cTESTKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('INPUTS' '{'
		//inputs+=UnitTestInput+
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'INPUTS'
		public Keyword getINPUTSKeyword_3_0() { return cINPUTSKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//inputs+=UnitTestInput+
		public Assignment getInputsAssignment_3_2() { return cInputsAssignment_3_2; }
		
		//UnitTestInput
		public RuleCall getInputsUnitTestInputParserRuleCall_3_2_0() { return cInputsUnitTestInputParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
		
		//'EXPECTS'
		public Keyword getEXPECTSKeyword_4() { return cEXPECTSKeyword_4; }
		
		//expected=Literal
		public Assignment getExpectedAssignment_5() { return cExpectedAssignment_5; }
		
		//Literal
		public RuleCall getExpectedLiteralParserRuleCall_5_0() { return cExpectedLiteralParserRuleCall_5_0; }
		
		//('ON_FAIL' '{'
		//'msg' '=' failedMessage=STRING
		//'}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'ON_FAIL'
		public Keyword getON_FAILKeyword_6_0() { return cON_FAILKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//'msg'
		public Keyword getMsgKeyword_6_2() { return cMsgKeyword_6_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_3() { return cEqualsSignKeyword_6_3; }
		
		//failedMessage=STRING
		public Assignment getFailedMessageAssignment_6_4() { return cFailedMessageAssignment_6_4; }
		
		//STRING
		public RuleCall getFailedMessageSTRINGTerminalRuleCall_6_4_0() { return cFailedMessageSTRINGTerminalRuleCall_6_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_5() { return cRightCurlyBracketKeyword_6_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class UnitTestInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.UnitTestInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOverwritingValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOverwritingValueLiteralParserRuleCall_2_0 = (RuleCall)cOverwritingValueAssignment_2.eContents().get(0);
		
		//UnitTestInput puzzle::UnitTestInput:
		//	variable=[constructs::Variable] '=' overwritingValue=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[constructs::Variable] '=' overwritingValue=Literal
		public Group getGroup() { return cGroup; }
		
		//variable=[constructs::Variable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[constructs::Variable]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_0_1() { return cVariableVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//overwritingValue=Literal
		public Assignment getOverwritingValueAssignment_2() { return cOverwritingValueAssignment_2; }
		
		//Literal
		public RuleCall getOverwritingValueLiteralParserRuleCall_2_0() { return cOverwritingValueLiteralParserRuleCall_2_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntergerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal constructs::Literal:
		//	IntergerLiteral | StringLiteral | BooleanLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntergerLiteral | StringLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntergerLiteral
		public RuleCall getIntergerLiteralParserRuleCall_0() { return cIntergerLiteralParserRuleCall_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_2() { return cBooleanLiteralParserRuleCall_2; }
	}
	public class IntergerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.IntergerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueREALINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntergerLiteral constructs::IntegerLiteral:
		//	{constructs::IntegerLiteral} value=REALINT;
		@Override public ParserRule getRule() { return rule; }
		
		//{constructs::IntegerLiteral} value=REALINT
		public Group getGroup() { return cGroup; }
		
		//{constructs::IntegerLiteral}
		public Action getIntegerLiteralAction_0() { return cIntegerLiteralAction_0; }
		
		//value=REALINT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//REALINT
		public RuleCall getValueREALINTTerminalRuleCall_1_0() { return cValueREALINTTerminalRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.StringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//StringLiteral constructs::StringLiteral:
		//	{constructs::StringLiteral} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{constructs::StringLiteral} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{constructs::StringLiteral}
		public Action getStringLiteralAction_0() { return cStringLiteralAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.BooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BooleanLiteral constructs::BooleanLiteral:
		//	{constructs::BooleanLiteral} value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//{constructs::BooleanLiteral} value=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//{constructs::BooleanLiteral}
		public Action getBooleanLiteralAction_0() { return cBooleanLiteralAction_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_1_0() { return cValueBOOLEANTerminalRuleCall_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable constructs::Variable:
		//	IntegerVariable | StringVariable | BooleanVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerVariable | StringVariable | BooleanVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerVariable
		public RuleCall getIntegerVariableParserRuleCall_0() { return cIntegerVariableParserRuleCall_0; }
		
		//StringVariable
		public RuleCall getStringVariableParserRuleCall_1() { return cStringVariableParserRuleCall_1; }
		
		//BooleanVariable
		public RuleCall getBooleanVariableParserRuleCall_2() { return cBooleanVariableParserRuleCall_2; }
	}
	public class IntegerVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.IntegerVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueREALINTTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//IntegerVariable constructs::IntegerVariable:
		//	{constructs::IntegerVariable}
		//	'int' name=ID '=' value=REALINT;
		@Override public ParserRule getRule() { return rule; }
		
		//{constructs::IntegerVariable}
		//'int' name=ID '=' value=REALINT
		public Group getGroup() { return cGroup; }
		
		//{constructs::IntegerVariable}
		public Action getIntegerVariableAction_0() { return cIntegerVariableAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=REALINT
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//REALINT
		public RuleCall getValueREALINTTerminalRuleCall_4_0() { return cValueREALINTTerminalRuleCall_4_0; }
	}
	public class StringVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.StringVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//StringVariable constructs::StringVariable:
		//	{constructs::StringVariable}
		//	'string' name=ID '=' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{constructs::StringVariable}
		//'string' name=ID '=' value=STRING
		public Group getGroup() { return cGroup; }
		
		//{constructs::StringVariable}
		public Action getStringVariableAction_0() { return cStringVariableAction_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=STRING
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0() { return cValueSTRINGTerminalRuleCall_4_0; }
	}
	public class BooleanVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.BooleanVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueBOOLEANTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//BooleanVariable constructs::BooleanVariable:
		//	{constructs::BooleanVariable}
		//	'bool' name=ID '=' value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }
		
		//{constructs::BooleanVariable}
		//'bool' name=ID '=' value=BOOLEAN
		public Group getGroup() { return cGroup; }
		
		//{constructs::BooleanVariable}
		public Action getBooleanVariableAction_0() { return cBooleanVariableAction_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_4_0() { return cValueBOOLEANTerminalRuleCall_4_0; }
	}
	
	
	private final PuzzleElements pPuzzle;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tREALINT;
	private final InputsElements pInputs;
	private final UnitTestElements pUnitTest;
	private final UnitTestInputElements pUnitTestInput;
	private final LiteralElements pLiteral;
	private final IntergerLiteralElements pIntergerLiteral;
	private final StringLiteralElements pStringLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final VariableElements pVariable;
	private final IntegerVariableElements pIntegerVariable;
	private final StringVariableElements pStringVariable;
	private final BooleanVariableElements pBooleanVariable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPuzzle = new PuzzleElements();
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.BOOLEAN");
		this.tREALINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.puzzle.dsl.DSL.REALINT");
		this.pInputs = new InputsElements();
		this.pUnitTest = new UnitTestElements();
		this.pUnitTestInput = new UnitTestInputElements();
		this.pLiteral = new LiteralElements();
		this.pIntergerLiteral = new IntergerLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pVariable = new VariableElements();
		this.pIntegerVariable = new IntegerVariableElements();
		this.pStringVariable = new StringVariableElements();
		this.pBooleanVariable = new BooleanVariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mdse.puzzle.dsl.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Puzzle puzzle::Puzzle:
	//	{puzzle::Puzzle}
	//	'PUZZLE' '{'
	//	'name' '=' name=STRING
	//	'description' '=' description=STRING
	//	inputs=Inputs?
	//	tests+=UnitTest+
	//	'}';
	public PuzzleElements getPuzzleAccess() {
		return pPuzzle;
	}
	
	public ParserRule getPuzzleRule() {
		return getPuzzleAccess().getRule();
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal REALINT returns ecore::EInt:
	//	'-'? INT;
	public TerminalRule getREALINTRule() {
		return tREALINT;
	}
	
	//Inputs puzzle::Inputs:
	//	'INPUTS' '{'
	//	variables+=Variable+
	//	'}';
	public InputsElements getInputsAccess() {
		return pInputs;
	}
	
	public ParserRule getInputsRule() {
		return getInputsAccess().getRule();
	}
	
	//UnitTest puzzle::UnitTest:
	//	{puzzle::UnitTest}
	//	'TEST' '{' ('INPUTS' '{'
	//	inputs+=UnitTestInput+
	//	'}')?
	//	'EXPECTS' expected=Literal ('ON_FAIL' '{'
	//	'msg' '=' failedMessage=STRING
	//	'}')?
	//	'}';
	public UnitTestElements getUnitTestAccess() {
		return pUnitTest;
	}
	
	public ParserRule getUnitTestRule() {
		return getUnitTestAccess().getRule();
	}
	
	//UnitTestInput puzzle::UnitTestInput:
	//	variable=[constructs::Variable] '=' overwritingValue=Literal;
	public UnitTestInputElements getUnitTestInputAccess() {
		return pUnitTestInput;
	}
	
	public ParserRule getUnitTestInputRule() {
		return getUnitTestInputAccess().getRule();
	}
	
	//Literal constructs::Literal:
	//	IntergerLiteral | StringLiteral | BooleanLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//IntergerLiteral constructs::IntegerLiteral:
	//	{constructs::IntegerLiteral} value=REALINT;
	public IntergerLiteralElements getIntergerLiteralAccess() {
		return pIntergerLiteral;
	}
	
	public ParserRule getIntergerLiteralRule() {
		return getIntergerLiteralAccess().getRule();
	}
	
	//StringLiteral constructs::StringLiteral:
	//	{constructs::StringLiteral} value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//BooleanLiteral constructs::BooleanLiteral:
	//	{constructs::BooleanLiteral} value=BOOLEAN;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//Variable constructs::Variable:
	//	IntegerVariable | StringVariable | BooleanVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//IntegerVariable constructs::IntegerVariable:
	//	{constructs::IntegerVariable}
	//	'int' name=ID '=' value=REALINT;
	public IntegerVariableElements getIntegerVariableAccess() {
		return pIntegerVariable;
	}
	
	public ParserRule getIntegerVariableRule() {
		return getIntegerVariableAccess().getRule();
	}
	
	//StringVariable constructs::StringVariable:
	//	{constructs::StringVariable}
	//	'string' name=ID '=' value=STRING;
	public StringVariableElements getStringVariableAccess() {
		return pStringVariable;
	}
	
	public ParserRule getStringVariableRule() {
		return getStringVariableAccess().getRule();
	}
	
	//BooleanVariable constructs::BooleanVariable:
	//	{constructs::BooleanVariable}
	//	'bool' name=ID '=' value=BOOLEAN;
	public BooleanVariableElements getBooleanVariableAccess() {
		return pBooleanVariable;
	}
	
	public ParserRule getBooleanVariableRule() {
		return getBooleanVariableAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
