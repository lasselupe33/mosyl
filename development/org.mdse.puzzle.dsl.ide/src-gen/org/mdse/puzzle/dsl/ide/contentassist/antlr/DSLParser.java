/*
 * generated by Xtext 2.24.0
 */
package org.mdse.puzzle.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.mdse.puzzle.dsl.ide.contentassist.antlr.internal.InternalDSLParser;
import org.mdse.puzzle.dsl.services.DSLGrammarAccess;

public class DSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
			builder.put(grammarAccess.getPuzzleAccess().getGroup(), "rule__Puzzle__Group__0");
			builder.put(grammarAccess.getInputsAccess().getGroup(), "rule__Inputs__Group__0");
			builder.put(grammarAccess.getUnitTestAccess().getGroup(), "rule__UnitTest__Group__0");
			builder.put(grammarAccess.getUnitTestAccess().getGroup_3(), "rule__UnitTest__Group_3__0");
			builder.put(grammarAccess.getUnitTestAccess().getGroup_6(), "rule__UnitTest__Group_6__0");
			builder.put(grammarAccess.getUnitTestInputAccess().getGroup(), "rule__UnitTestInput__Group__0");
			builder.put(grammarAccess.getIntergerLiteralAccess().getGroup(), "rule__IntergerLiteral__Group__0");
			builder.put(grammarAccess.getStringLiteralAccess().getGroup(), "rule__StringLiteral__Group__0");
			builder.put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
			builder.put(grammarAccess.getIntegerVariableAccess().getGroup(), "rule__IntegerVariable__Group__0");
			builder.put(grammarAccess.getStringVariableAccess().getGroup(), "rule__StringVariable__Group__0");
			builder.put(grammarAccess.getBooleanVariableAccess().getGroup(), "rule__BooleanVariable__Group__0");
			builder.put(grammarAccess.getPuzzleAccess().getNameAssignment_5(), "rule__Puzzle__NameAssignment_5");
			builder.put(grammarAccess.getPuzzleAccess().getDescriptionAssignment_8(), "rule__Puzzle__DescriptionAssignment_8");
			builder.put(grammarAccess.getPuzzleAccess().getInputsAssignment_9(), "rule__Puzzle__InputsAssignment_9");
			builder.put(grammarAccess.getPuzzleAccess().getTestsAssignment_10(), "rule__Puzzle__TestsAssignment_10");
			builder.put(grammarAccess.getInputsAccess().getVariablesAssignment_2(), "rule__Inputs__VariablesAssignment_2");
			builder.put(grammarAccess.getUnitTestAccess().getInputsAssignment_3_2(), "rule__UnitTest__InputsAssignment_3_2");
			builder.put(grammarAccess.getUnitTestAccess().getExpectedAssignment_5(), "rule__UnitTest__ExpectedAssignment_5");
			builder.put(grammarAccess.getUnitTestAccess().getFailedMessageAssignment_6_4(), "rule__UnitTest__FailedMessageAssignment_6_4");
			builder.put(grammarAccess.getUnitTestInputAccess().getVariableAssignment_0(), "rule__UnitTestInput__VariableAssignment_0");
			builder.put(grammarAccess.getUnitTestInputAccess().getOverwritingValueAssignment_2(), "rule__UnitTestInput__OverwritingValueAssignment_2");
			builder.put(grammarAccess.getIntergerLiteralAccess().getValueAssignment_1(), "rule__IntergerLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment_1(), "rule__StringLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getBooleanLiteralAccess().getValueAssignment_1(), "rule__BooleanLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getIntegerVariableAccess().getNameAssignment_2(), "rule__IntegerVariable__NameAssignment_2");
			builder.put(grammarAccess.getIntegerVariableAccess().getValueAssignment_4(), "rule__IntegerVariable__ValueAssignment_4");
			builder.put(grammarAccess.getStringVariableAccess().getNameAssignment_2(), "rule__StringVariable__NameAssignment_2");
			builder.put(grammarAccess.getStringVariableAccess().getValueAssignment_4(), "rule__StringVariable__ValueAssignment_4");
			builder.put(grammarAccess.getBooleanVariableAccess().getNameAssignment_2(), "rule__BooleanVariable__NameAssignment_2");
			builder.put(grammarAccess.getBooleanVariableAccess().getValueAssignment_4(), "rule__BooleanVariable__ValueAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLGrammarAccess grammarAccess;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
